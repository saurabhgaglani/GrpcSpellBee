# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import spellbee_pb2 as spellbee__pb2


class ServerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getLetters = channel.unary_unary(
                '/Server/getLetters',
                request_serializer=spellbee__pb2.letterRequest.SerializeToString,
                response_deserializer=spellbee__pb2.letterResponse.FromString,
                )
        self.getScore = channel.unary_unary(
                '/Server/getScore',
                request_serializer=spellbee__pb2.scoreRequest.SerializeToString,
                response_deserializer=spellbee__pb2.scoreResponse.FromString,
                )
        self.checkWord = channel.unary_unary(
                '/Server/checkWord',
                request_serializer=spellbee__pb2.wordRequest.SerializeToString,
                response_deserializer=spellbee__pb2.wordResponse.FromString,
                )
        self.checkDict = channel.unary_unary(
                '/Server/checkDict',
                request_serializer=spellbee__pb2.dictRequest.SerializeToString,
                response_deserializer=spellbee__pb2.dictResponse.FromString,
                )
        self.getCurrentState = channel.unary_unary(
                '/Server/getCurrentState',
                request_serializer=spellbee__pb2.stateRequest.SerializeToString,
                response_deserializer=spellbee__pb2.stateResponse.FromString,
                )
        self.gameHasEnded = channel.unary_unary(
                '/Server/gameHasEnded',
                request_serializer=spellbee__pb2.gameRequest.SerializeToString,
                response_deserializer=spellbee__pb2.gameResponse.FromString,
                )
        self.hasGameEnded = channel.unary_unary(
                '/Server/hasGameEnded',
                request_serializer=spellbee__pb2.endRequest.SerializeToString,
                response_deserializer=spellbee__pb2.endResponse.FromString,
                )
        self.declareWinner = channel.unary_unary(
                '/Server/declareWinner',
                request_serializer=spellbee__pb2.winnerRequest.SerializeToString,
                response_deserializer=spellbee__pb2.winnerResponse.FromString,
                )
        self.getWinner = channel.unary_unary(
                '/Server/getWinner',
                request_serializer=spellbee__pb2.getWinnerRequest.SerializeToString,
                response_deserializer=spellbee__pb2.getWinnerResponse.FromString,
                )
        self.getNumGames = channel.unary_unary(
                '/Server/getNumGames',
                request_serializer=spellbee__pb2.getGameRequest.SerializeToString,
                response_deserializer=spellbee__pb2.getGameresponse.FromString,
                )
        self.connect = channel.unary_unary(
                '/Server/connect',
                request_serializer=spellbee__pb2.Player.SerializeToString,
                response_deserializer=spellbee__pb2.connectResponse.FromString,
                )


class ServerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getLetters(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getScore(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def checkWord(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def checkDict(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getCurrentState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def gameHasEnded(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def hasGameEnded(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def declareWinner(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getWinner(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getNumGames(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def connect(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getLetters': grpc.unary_unary_rpc_method_handler(
                    servicer.getLetters,
                    request_deserializer=spellbee__pb2.letterRequest.FromString,
                    response_serializer=spellbee__pb2.letterResponse.SerializeToString,
            ),
            'getScore': grpc.unary_unary_rpc_method_handler(
                    servicer.getScore,
                    request_deserializer=spellbee__pb2.scoreRequest.FromString,
                    response_serializer=spellbee__pb2.scoreResponse.SerializeToString,
            ),
            'checkWord': grpc.unary_unary_rpc_method_handler(
                    servicer.checkWord,
                    request_deserializer=spellbee__pb2.wordRequest.FromString,
                    response_serializer=spellbee__pb2.wordResponse.SerializeToString,
            ),
            'checkDict': grpc.unary_unary_rpc_method_handler(
                    servicer.checkDict,
                    request_deserializer=spellbee__pb2.dictRequest.FromString,
                    response_serializer=spellbee__pb2.dictResponse.SerializeToString,
            ),
            'getCurrentState': grpc.unary_unary_rpc_method_handler(
                    servicer.getCurrentState,
                    request_deserializer=spellbee__pb2.stateRequest.FromString,
                    response_serializer=spellbee__pb2.stateResponse.SerializeToString,
            ),
            'gameHasEnded': grpc.unary_unary_rpc_method_handler(
                    servicer.gameHasEnded,
                    request_deserializer=spellbee__pb2.gameRequest.FromString,
                    response_serializer=spellbee__pb2.gameResponse.SerializeToString,
            ),
            'hasGameEnded': grpc.unary_unary_rpc_method_handler(
                    servicer.hasGameEnded,
                    request_deserializer=spellbee__pb2.endRequest.FromString,
                    response_serializer=spellbee__pb2.endResponse.SerializeToString,
            ),
            'declareWinner': grpc.unary_unary_rpc_method_handler(
                    servicer.declareWinner,
                    request_deserializer=spellbee__pb2.winnerRequest.FromString,
                    response_serializer=spellbee__pb2.winnerResponse.SerializeToString,
            ),
            'getWinner': grpc.unary_unary_rpc_method_handler(
                    servicer.getWinner,
                    request_deserializer=spellbee__pb2.getWinnerRequest.FromString,
                    response_serializer=spellbee__pb2.getWinnerResponse.SerializeToString,
            ),
            'getNumGames': grpc.unary_unary_rpc_method_handler(
                    servicer.getNumGames,
                    request_deserializer=spellbee__pb2.getGameRequest.FromString,
                    response_serializer=spellbee__pb2.getGameresponse.SerializeToString,
            ),
            'connect': grpc.unary_unary_rpc_method_handler(
                    servicer.connect,
                    request_deserializer=spellbee__pb2.Player.FromString,
                    response_serializer=spellbee__pb2.connectResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Server', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Server(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getLetters(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Server/getLetters',
            spellbee__pb2.letterRequest.SerializeToString,
            spellbee__pb2.letterResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getScore(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Server/getScore',
            spellbee__pb2.scoreRequest.SerializeToString,
            spellbee__pb2.scoreResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def checkWord(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Server/checkWord',
            spellbee__pb2.wordRequest.SerializeToString,
            spellbee__pb2.wordResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def checkDict(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Server/checkDict',
            spellbee__pb2.dictRequest.SerializeToString,
            spellbee__pb2.dictResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getCurrentState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Server/getCurrentState',
            spellbee__pb2.stateRequest.SerializeToString,
            spellbee__pb2.stateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def gameHasEnded(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Server/gameHasEnded',
            spellbee__pb2.gameRequest.SerializeToString,
            spellbee__pb2.gameResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def hasGameEnded(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Server/hasGameEnded',
            spellbee__pb2.endRequest.SerializeToString,
            spellbee__pb2.endResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def declareWinner(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Server/declareWinner',
            spellbee__pb2.winnerRequest.SerializeToString,
            spellbee__pb2.winnerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getWinner(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Server/getWinner',
            spellbee__pb2.getWinnerRequest.SerializeToString,
            spellbee__pb2.getWinnerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getNumGames(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Server/getNumGames',
            spellbee__pb2.getGameRequest.SerializeToString,
            spellbee__pb2.getGameresponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def connect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Server/connect',
            spellbee__pb2.Player.SerializeToString,
            spellbee__pb2.connectResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
